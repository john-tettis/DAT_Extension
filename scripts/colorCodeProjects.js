// Setting for autoGenerated project colors
// let useAutogeneratedColors = true;

// Manual dictionary of project names/regex and corresponding colors
let highlightRules = []; 

chrome.storage.sync.get(['highlightRules'], (result) => {
  highlightProjectRows(result.highlightRules); 
});


function isProjectNameMatch(projectName, key) {
    if (projectName.includes(key)) return true;
    let keyAsRegExp = new RegExp(key,"gi");
    return keyAsRegExp.test(projectName);
}

function highlightProjectRows(highlightRules) {
  const projectRows = document.querySelectorAll('tbody tr');

  projectRows.forEach(row => {
    const projectNameCell = row.querySelector('td:first-child a');
    const projectName = projectNameCell.textContent;
    if(!highlightRules || highlightRules.length === 0) return;
    for (let rule of highlightRules) {
      if (isProjectNameMatch(projectName, rule.regex)) {
        row.style.backgroundColor = rule.color;
      }
    }
  }
  );
}


// Below: WIP Code for automatic colour coding via extraction and hashing of project name. 

// const extractProjectFamily = (projectName) => {
//   if (!projectName) return "";
//   let projectFamilyRegex = /^(\[.*\]\s*)?(rate and review:\s*)?(\w+)/gim
//   console.log(projectName.match(projectFamilyRegex));
//   let projectFamilyMatch = projectName.match(projectFamilyRegex);
//   let [isPriority, isRateAndReview, projectFamily] = projectFamilyMatch;
//   return projectFamily;
// }

// const generateColorForProjectFamilyName = (projectName) => {

//   //Isolate first word to find project family. 
//   let projectFamily = extractProjectFamily(projectName);

//   //Generate a colour based on a hash of the project family. 
//   //This should mean that each project family will have a certain auto-generated and stable colour, without manually setting it for every family. 

//   let hash = 0;
//   for (let i = 0; i < projectFamily.length; i++) {
//     hash = projectFamily.charCodeAt(i) + ((hash << 5) - hash);
//   }

//   const hue = hash % 360; // Ensure hue is within 0-360
//   const saturation = 80 + (hash % 20); // Some variation in saturation
//   const lightness = 50; // Keep lightness consistent for readability

//   return `hsl(${hue}, ${saturation}%, ${lightness}%)`;
// }

